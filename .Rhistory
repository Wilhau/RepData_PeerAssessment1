arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_gb=size_mb/2^10)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
sumarize(cran, avg_bytes=mean(size))
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(by_packate, count>679)
top_counts<-filter(by_package, count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
?arrange
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs=0.99)
filter(pack_sum, unique>465)
top_unique<-filter(pack_sum, unique>465)
top_unique
arrange(top_unique, desc(unique)
)
submit()
submit()
?chain
submit()
submit()
submit()
submit()
submit()
?unique
library(httr)
oauth_endpoint("github")
?oauth_endpoint
github <- oauth_endpoint(NULL, "authorize", "access_token",
base_url = "https://github.com/login/oauth")
my app <- oauth_app("github",key="9cf920c48d7585f45231",secret = "493877378ff639f58c8e9c33397c969a2fe0626d")
myapp <- oauth_app("github",key="9cf920c48d7585f45231",secret = "493877378ff639f58c8e9c33397c969a2fe0626d")
github_token <- oauth2.0_token(github, myapp)
library(httpuv)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(github, myapp)
req <- GET("https://api.github.com/users/jtleek/repos", github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config=github_token)
library(httpuv)
library(httr)
github <- oauth_endpoint(NULL, "authorize", "access_token",base_url = "https://github.com/login/oauth")
myapp <- oauth_app("github",key="9cf920c48d7585f45231",secret = "493877378ff639f58c8e9c33397c969a2fe0626d")
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
str(req)
req[["date"]]
req$date
content(req)
req[["datasharing"]]
con<-content(req)
con[[datasharing]]
con[["datasharing"]]
str(con)
library(swirl)
swirl
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students2
res <- gather(students2, sex_class, count, -grade)
res
submit()
students3
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
reset()
submit()
students4
submit()
submit()
submit()
passed
failed
?mutate
mutate(passsed, status="passed")
mutate(passed, status="passed")
passed<- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
?rbind_list
rbind_list(passed, failed)
sat
?contains
?contain
?arrange
?separate
submit()
submit()
contains(sat, "total")
?select
submit()
select(sat, contains("total"))
select(sat, !contains("total"))
select(sat, not contains("total"))
select(sat, -contains("total"))
submit()
submit()
submit()
q()
`820faa003f6c11e4ab32f39fd97a1a73` <- read.table("C:/Users/wilsonl/Google Drive/Coursera/Data Science/3. Getting and Cleaning Data/Work/UCI HAR Dataset/820faa003f6c11e4ab32f39fd97a1a73.txt", header=TRUE, quote="\"")
View(`820faa003f6c11e4ab32f39fd97a1a73`)
`820faa003f6c11e4ab32f39fd97a1a73` <- read.csv("C:/Users/wilsonl/Google Drive/Coursera/Data Science/3. Getting and Cleaning Data/Work/UCI HAR Dataset/820faa003f6c11e4ab32f39fd97a1a73.txt")
View(`820faa003f6c11e4ab32f39fd97a1a73`)
`820faa003f6c11e4ab32f39fd97a1a73` <- read.csv("C:/Users/wilsonl/Desktop/820faa003f6c11e4ab32f39fd97a1a73.txt", header=FALSE)
View(`820faa003f6c11e4ab32f39fd97a1a73`)
`820faa003f6c11e4ab32f39fd97a1a73` <- read.csv("C:/Users/wilsonl/Desktop/820faa003f6c11e4ab32f39fd97a1a73.txt")
View(`820faa003f6c11e4ab32f39fd97a1a73`)
features <- read.table("C:/Users/wilsonl/Google Drive/Coursera/Data Science/3. Getting and Cleaning Data/Work/UCI HAR Dataset/features.txt", quote="\"")
View(features)
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
Sys.getlocale
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day. label=TRUE)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
class(this_moment)
class(this_day)
minute(this_momment)
minute(this_moment)
my_date<-ymd("1989-05-17")
class(my_date)
my_date
class(my_date)
ymd("1989 may 17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
class(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_momment, hours=8, minutes=34, seconds =55)
update(this_moment, hours=8, minutes=34, seconds =55)
this_momment
thismoment
this_mement
this_moment
this_moment <- update(this_moment, hours=8, minutes=34, seconds =55)
this_moment
now("america/new_york")
nyc<-now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
digest
library(digest)
digest
raw <- c("abc", "eff", "xyz")
class(raw)
raw
digest("abc", algo="sha1", serialize=FALSE)
digest(raw, algo="sha1", serialize=FALSE)
dim(raw)
length(raw)
raw[1]
raw[2]
digest(raw[1], algo="sha1", serialize=FALSE)
digest(raw[2], algo="sha1", serialize=FALSE)
digest(raw[3], algo="sha1", serialize=FALSE)
sapply(raw, digest(, algo="sha1", serialize=FALSE))
sapply(raw, digest, algo="sha1", serialize=FALSE)
out<-sapply(raw, digest, algo="sha1", serialize=FALSE)
out
class(out)
dim(out)
length(out)
str(out)
attribute(out)
attributes(out)
attributes(raw)
out.list<-lapply(raw, digest, algo="sha1", serialize=FALSE)
out.list
class(out.list)
out.df<-as.data.frame(out)
out.df
View(out.df)
names(out.df)
cbind(raw, out)
out.df <- cbind(raw, out)
out.df
class(out.df)
View(out.df)
out
class(out)
as.matrix(out)
as.data.frame(out)
out.df<-as.data.frame(out)
names(out.df)
out.mt <- as.matrix(out)
out.mt
names(out.mt)
raw.df <- as.data.frame(raw)
raw.df
out <- sapply(raw.df, digest, algo="sha1", serialize=FALSE)
out <- sapply(raw.df[1], digest, algo="sha1", serialize=FALSE)
raw.df[1]
raw.df[[1]
]
out <- sapply(raw.df[[1], digest, algo="sha1", serialize=FALSE)
out <- sapply(raw.df[[1]], digest, algo="sha1", serialize=FALSE)
out <- sapply(raw.df[1], digest, algo="sha1")
out
raw.df
attributes(raw.df)
raw.lt <- as.list(raw)
raw.lt
class(raw.lt)
out <- sapply(raw.lt, digest, algo="sha1", serialize=FALSE)
out
class(out)
out <- lapply(raw.lt, digest, algo="sha1", serialize=FALSE)
out
class(out)
cbind(raw.lt, out)
class(cbind(raw.lt, out))
dim(cbind(raw.lt, out))
out <- sapply(raw.lt, digest, algo="sha1", serialize=FALSE)
cbind(raw.lt, out)
class(cbind(raw.lt, out))
raw.df
as.list(raw.df)
raw.df<-cbind(raw.df, c("lalala"))
raw.df
as.list(raw.df)
as.list(raw.df[1])
as.vector(raw.df)
as.vector(raw.df[1])
raw.df[1,]
raw.df[,1]
raw.v <- as.vector(raw.df[1])
class(raw.v)
raw.c <- as.character(raw.df[1])
raw.c
raw.lt <- as.list(raw.df[1])
raw.lt
class(raw.lt)
length(raw.lt)
raw.v <- as.vector(raw.df[1], mode="character")
raw.v
raw.lt
lapply(raw.lt, digest, algo="sha1", serialize=FALSE)
as.character(raw.dt[1])
as.character(raw.df[1])
raw.df[1]
raw.df[,1]
class(raw.df[,1])
class(raw.df[1])
class(raw.df[[1])
class(raw.df[[1]])
raw.df[[1]]
lapply(raw.df[[1]], digest, algo="sha1", serialize=FALSE)
as.character(raw.df[[1]])
lapply(as.character(raw.df[[1]]), digest, algo="sha1", serialize=FALSE)
sapply(as.character(raw.df[[1]]), digest, algo="sha1", serialize=FALSE)
install.packages("digest")
install.packages("digest")
installed.packages()
packages <- installed.packages()
class(packages)
dim(packages)
View(packages)
packages[[1]]
packages[1]
packages[1,]
packages[,1]
packages$Package
names(packages)
attributes(packages)
dimnames(packages)
head(packages[,1])
head(packages[1,])
subset(packages, packages[,1]=="digest")
packages[, packages[,1]=='digest']
subset(packages, packages[,1]=="dige")
length(subset(packages, packages[,1]=="dige"))
length(subset(packages, packages[,1]=="digest"))
dim(subset(packages, packages[,1]=="digest"))
dim(subset(packages, packages[,1]=="digt"))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
str(airquality)
summary()
summary(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
install.packages("rodbc")
install.packages("RODBC")
install.packages(c("dplyr", "highr", "httpuv", "jsonlite", "knitr"))
library("RODBC", lib.loc="~/R/win-library/3.1")
ch <- odbcConnect("OLMDB")
str(ch)
sqlTables(ch)
Product <- sqlFetch(ch, "Product")
str(Product)
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ'")
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ'")
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ'")
ch <- odbcConnect("OLMDB")
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ'")
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ'")
table(RFQ$Quantity)
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ' and Quanty = 1")
ch <- odbcConnect("OLMDB")
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ' and Quanty = 1")
RFQ
RFQ <- sqlQuery(ch, "Select Trans_Detail.Site_ID, Trans_Detail.Reporting_Date, Trans_Detail.First_Name, Trans_Detail.Last_Name, Trans_Detail.Requisition_ID, Trans_Detail.Product_ID, Trans_Detail.Product_Name, Trans_Detail.Quantity, Trans_Detail.Customer_Email, Product.Store, Product.[Transaction Category], Product.[Transaction Type] From Trans_Detail Inner Join Product On Trans_Detail.Product_ID = Product.ProductID Where Trans_Detail.Reporting_Date > '2014-01-01' And Product.[Transaction Type] = 'RFQ' and Quantity = 1")
table(RFQ$Quantity, RFQ$Site_ID)
table(RFQ$Product_ID, RFQ$Site_ID)
table(RFQ$Product_ID, RFQ$Site_ID, RFQ$Store)
table(RFQ$Product_ID, RFQ$Store)
table(RFQ$Product_ID, RFQ$Product_Name)
table(RFQ$Product_Name)
table(RFQ$Product_Name)
table(RFQ$Product_Name)
unique(RFQ$Product_Name)
distinct
library("dplyr")
distinct(RFQ$Product_Name)
distinct(RFQ, Product_Name)
unique(RFQ$Product_Name)
Exp <- sqlQuery(ch, "SELECT Email_WSE
FROM [Dr_Data_WSE_new].[dbo].[prior_months_3_Q1_2013]
Where ExpireDate > '2013-12-01' and ExpireDate < '2015-01-01' and Region = 'NABU'")
Exp <- sqlQuery(ch, "SELECT Email_WSE FROM [Dr_Data_WSE_new].[dbo].[prior_months_3_Q1_2013] Where ExpireDate > '2013-12-01' and ExpireDate < '2015-01-01' and Region = 'NABU'")
EXP
Exp
ch <- odbcConnect("OLMDB")
Exp <- sqlQuery(ch, "SELECT Email_WSE FROM [Dr_Data_WSE_new].[dbo].[prior_months_3_Q1_2013] Where ExpireDate > '2013-12-01' and ExpireDate < '2015-01-01' and Region = 'NABU'")
str(ch)
str(Exp)
attributes(Exp)
names(Exp)
nrow(Exp)
Match <- filter(Exp, Email_WSE %in% RFQ$Customer_Email)
View(Match)
Exp[Exp$Email_WSE %in% RFQ$Customer_Email, ]
Match2 <- Exp[Exp$Email_WSE %in% RFQ$Customer_Email, ]
head(Match2)
Exp <- sqlQuery(ch, "SELECT distinct Email_WSE FROM [Dr_Data_WSE_new].[dbo].[prior_months_3_Q1_2013] Where ExpireDate > '2013-12-01' and ExpireDate < '2015-01-01' and Region = 'NABU'")
Match <- filter(RFQ, Customer_Email %in% Exp$Email_WSE)
Exp <- sqlQuery(ch, "SELECT distinct Email_WSE, ExpireDate FROM [Dr_Data_WSE_new].[dbo].[prior_months_3_Q1_2013] Where ExpireDate > '2013-12-01' and ExpireDate < '2015-01-01' and Region = 'NABU'")
head(RFQ$Reporting_Date)
head(RFQ$Reporting_Date) + 30
head(RFQ$Reporting_Date) + 10
head(RFQ$Reporting_Date) < tail(RFQ$Reporting_Date)
tail(RFQ$Reporting_Date)
Match <- inner_join(RFQ, Exp, by = c("Customer_Email" = "Email"))
Match <- inner_join(RFQ, Exp, by = c("Customer_Email" = "Email_WSE"))
View(Match)
Match2 <- merge(RFQ, Exp, by.x="Customer_Email", by.y="Email_WSE")
c("a" = "b")
Match3 <- filter(Match, between(Reporting_Date, ExpireDate - 31, ExpireDate + 31))
Match3 <- filter(Match, Reporting_Date > ExpireDate - 31 & Reporting_Date < ExpireDate + 31))
Match3 <- filter(Match, Reporting_Date > ExpireDate - 31 & Reporting_Date < ExpireDate + 31)
Match3 <- filter(Match, Reporting_Date > as.Date(ExpireDate) - 31 & Reporting_Date < as.Date(ExpireDate) + 31)
View(Match3)
Match3 <- filter(Match, Reporting_Date > as.Date(ExpireDate) - 60 & Reporting_Date < as.Date(ExpireDate) + 60)
Match3 <- filter(Match, Reporting_Date > as.Date(ExpireDate) - 30 & Reporting_Date < as.Date(ExpireDate) + 30)
library("RODBC", lib.loc="~/R/win-library/3.1")
con <- odbcConnect("Responsys")
sqlTables(con)
Res <- sqlFetch(con, "select top 100 * from Full_user")
Res <- sqlFetch(con, "select top 100 * from FullUser")
Res <- sqlFetch(con, "select top 100 * from dbo.FullUser")
Res <- sqlQuery(con, "select top 100 * from dbo.FullUser")
odbcClose(con)
ls()
setwd("~/Git Repository/Course5 RepData/RepData_PeerAssessment1")
act <- read.csv("activity.csv")
act_rm.na <- act[!is.na(act$steps),]
act_median_date <- aggregate(steps ~ date, data=act_rm.na, median)
View(act_median_date)
summary(act_rm.na)
summary(act_median_date)
act_mean_date <- aggregate(steps ~ date, data=act_rm.na, mean)
summary(act_mean_date)
View(act_rm.na)
View(act_rm.na)
colnames(act_mean_date$steps) <- "steps_mean"
colnames(act_mean_date) <- c("date, "steps_mean")
colnames(act_mean_date) <- c("date"", "steps_mean")
colnames(act_mean_date) <- c("date", "steps_mean")
colnames(act_median_date) <- c("date", steps_median")
colnames(act_median_date) <- c("date", steps_median")
)
()
1
2
3
colnames(act_median_date) <- c("date", "steps_median")
act_mean_interval <- aggregate(steps ~ interval, data=act_rm.na, mean)
colnames(act_mean_date) <- c("interval", "mean_steps")
plot(act_mean_interval$interval, act_mean_interval$average_steps, type="l")
plot(act_mean_interval, type="l")
colnames(act_mean_date) <- c("interval", "average_steps")
plot(act_mean_interval, type="l")
colnames(act_mean_date) <- c("interval", "average_steps")
plot(act_mean_interval, type="l")
colnames(act_mean_date) <- c("date", "average_steps")
colnames(act_mean_interval) <- c("interval", "average_steps")
plot(act_mean_interval, type="l")
plot(act_mean_interval, type="l", main="Daily Average Steps per 5-minutes Interval")
hist(act_sum_date$steps)
act_sum_date <- aggregate(steps ~ date, data=act_rm.na, sum)
hist(act_sum_date$steps)
hist(act_sum_date$steps, main="Total Number of Steps Taken per Day", xlab="Number of Steps")
act_sum_date <- aggregate(steps ~ date, data=act, sum)
hist(act_sum_date$steps, main="Total Number of Steps Taken per Day", xlab="Number of Steps")
act_median_date <- aggregate(steps ~ date, data=act, median)
colnames(act_median_date) <- c("date", "median_steps")
act_mean_date <- aggregate(steps ~ date, data=act, mean)
colnames(act_mean_date) <- c("date", "average_steps")
View(act_mean_date)
View(act_median_date)
